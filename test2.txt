

server.port=9014
server.servlet.context-path=/Duty-Reg






#datasource Properties

spring.datasource.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver
spring.datasource.url=jdbc:sqlserver://DESKTOP-R53GNLA\\SQLEXPRESS;databaseName=test;encrypt=false;
spring.datasource.username=sa
spring.datasource.password=


#hibernate
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
----------------------------------------------------------------------------------------
@SpringBootApplication
public class DutyRegisterApplication {

	public static void main(String[] args) {
		SpringApplication.run(DutyRegisterApplication.class, args);
	}

}
----------------------------------------------------------------------------------------

import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

import lombok.Data;

@Data
@Entity
@Table(name="DutyRegister_tab")
public class DutyRegister {

	@Id
	private String userName;
	private String date;
	private String timeOnDuty;
	private String name;
	private String dutyPoint;
	private String timeOffDuty;

	

}

----------------------------------------------------------------------------------------
import lombok.AllArgsConstructor; 
import lombok.Data; 
import lombok.NoArgsConstructor; 
 
@Data 
@NoArgsConstructor 
@AllArgsConstructor
 
public class Message { 
 	private String type; 
 	private String message; 
} 
----------------------------------------------------------------------------------------
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;


@Repository
public interface DutyRegisterRepository extends JpaRepository<DutyRegister, String> {
	

}

----------------------------------------------------------------------------------------


import java.util.List;
import java.util.Optional;


public interface IDutyRegisterService {
	
	public String saveDataManager(DutyRegister s);
	public List<DutyRegister> getAllDataManager();
	public Optional<DutyRegister> getOneDataManager(String nm);
	public boolean isExist(String name);
	public void deleteDataManager(String name);

}

---------------------------------------------------------------------------------

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.ust.model.DutyRegister;
import com.ust.repo.DutyRegisterRepository;

@Service
public class DutyRegisterServiceImpl implements IDutyRegisterService{
	
	@Autowired
	private DutyRegisterRepository prepo;

	@Override
	public String saveDataManager(DutyRegister p) {
		return prepo.save(p).getUserName();
	}

	@Override
	public List<DutyRegister> getAllDataManager() {
		return prepo.findAll();
	}

	@Override
	public Optional<DutyRegister> getOneDataManager(String un) {
		return prepo.findById(un);
	}

	@Override
	public boolean isExist(String name) {
		return prepo.existsById(name); 
	}

	@Override
	public void deleteDataManager(String name) {
		prepo.deleteById(name);
	}

}

----------------------------------------------------------------------------------------

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;


@RestController
@CrossOrigin(origins = "*")
@RequestMapping("/rest/duty")
public class DutyRegisterController {
	
	@Autowired
	private DutyRegisterServiceImpl service;
	
	
	
	@PostMapping("/save")
	public ResponseEntity<Message> saveMovie(@RequestBody DutyRegister plc)
	{ 
		ResponseEntity<Message> resp=null;
		try { 
			String name=service.saveDataManager(plc);
			resp=new ResponseEntity<Message>(new Message("SUCCESS",name+"-saved"),HttpStatus.OK); 
		} catch (Exception e) { 
			resp=new ResponseEntity<Message>(new Message("FAIL","Unable to Save"),HttpStatus.OK); 
			e.printStackTrace(); 
		} 
		return resp; 
	} 

	@GetMapping("/all")  	
	public ResponseEntity<?> getAllMovie(){
		ResponseEntity<?> resp=null; 
		try { 
			List<DutyRegister> list=service.getAllDataManager(); 
			if(list!=null && !list.isEmpty()) 
				resp=new ResponseEntity<List<DutyRegister>>(list,HttpStatus.OK); 
			else 
				resp=new ResponseEntity<String>("No Data Found",HttpStatus.OK); 
		} catch (Exception e) { 
			resp=new ResponseEntity<String>("Unable to fetch Data",HttpStatus.INTERNAL_SERVER_ERROR); 
			e.printStackTrace(); 
		} 

		return resp; 
	} 


	@GetMapping("/one/{nm}")  	
	public ResponseEntity<?> getOneMovie(@PathVariable String nm) 
	{ 
		ResponseEntity<?> resp=null; 
		try { 
			Optional<DutyRegister> opt=service.getOneDataManager(nm); 
			if(opt.isPresent())  
				resp=new ResponseEntity<DutyRegister>(opt.get(),HttpStatus.OK); 
			else 
				resp=new ResponseEntity<String>("No Data Found",HttpStatus.BAD_REQUEST); 
		} catch (Exception e) { 
			resp=new ResponseEntity<String>("Unable to Fetch Data",HttpStatus.INTERNAL_SERVER_ERROR); 
			e.printStackTrace(); 
		} 
		return resp; 
	} 


	@DeleteMapping("/remove/{nm}") 
	public ResponseEntity<Message> deleteMovie(@PathVariable String nm) 
	{ 
		System.out.println("welcome");
		ResponseEntity<Message> resp=null; 
		try { 
			boolean exist=service.isExist(nm); 
			if(exist) {
				service.deleteDataManager(nm);
				resp=new ResponseEntity<Message>(new Message("SUCCESSS",nm+"-removed"),HttpStatus.OK); 
			}else { 
				resp=new ResponseEntity<Message>(new Message("FAIL",nm+"-Not Exist"),HttpStatus.BAD_REQUEST); 
			} 
		} catch (Exception e) { 
			resp=new ResponseEntity<Message>(new Message("FAIL","Unable to Delete"),HttpStatus.INTERNAL_SERVER_ERROR); 
			e.printStackTrace(); 
		} 

		return resp; 
	} 


	@PutMapping("/update") 
	public ResponseEntity<Message> updateMovie(@RequestBody DutyRegister pls) {
		ResponseEntity<Message> resp=null; 
			try { 
				boolean exist=service.isExist(pls.getUserName()); 
				if(exist) { 
					service.saveDataManager(pls);
					resp=new ResponseEntity<Message>(new Message("OK",pls.getUserName()+"-Updated"),HttpStatus.OK); 
				}else { 
					resp=new ResponseEntity<Message>(new Message("OK",pls.getUserName()+"-Not Exist"),HttpStatus.BAD_REQUEST); 
				} 
			} catch (Exception e) { 
				resp=new ResponseEntity<Message>(new Message("OK","Unable to Update"),HttpStatus.INTERNAL_SERVER_ERROR); 
				e.printStackTrace(); 
			} 
			return resp; 
	} 

	


}

----------------------------------------------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.6.4</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.ust</groupId>
	<artifactId>Duty-Register</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>Duty-Register</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>1.8</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>

		<dependency>
			<groupId>com.microsoft.sqlserver</groupId>
			<artifactId>mssql-jdbc</artifactId>
			<scope>runtime</scope>
		</dependency>


		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>

----------------------------------------------------------------------------------------